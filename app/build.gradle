apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-kapt'

def config = rootProject.ext
android {
    compileSdkVersion config.targetSdkVersion
    buildToolsVersion config.buildToolsVersion

    defaultConfig {
        applicationId config.applicationId
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    dataBinding {
        enabled = true
    }
    signingConfigs {

        release {

            keyAlias '123456'
            keyPassword '123456'
            storeFile file('/ysltest.jks')
            storePassword '123456'
        }

        debug {

            keyAlias '123456'
            keyPassword '123456'
            storeFile file('/ysltest.jks')
            storePassword '123456'
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug

        }
    }
    applicationVariants.all {

        //判断是release还是debug版本
        def buildType = it.buildType.name
        def fileName
        //下面的channel是获取渠道号，你获取渠道号不一定会和我的代码一样，因为有可能你的渠道名称的规则和我的不一样，我的规则是${渠道名}-${applicationId},所以我是这样取的。
//            def channel = it.productFlavors[0].name.split("-")[0]
        //获取当前时间的"YYYY-MM-dd"格式。
        def createTime = new Date().format("YYYY-MM-dd", TimeZone.getTimeZone("GMT+08:00"))
        //只对Release包起作用，如果不是Release包则不变更输出路径，否则可能导致AS无法自动安装debug包。

        it.outputs.each {
            //只对Release包起作用，如果不是Release包则不变更名称。
            if (buildType == "release") {
                //我此处的命名规则是：渠道名_项目名_版本名_创建时间_构建类型.apk
                fileName = "Photo_${defaultConfig.versionName}_${createTime}-${buildType}.apk"
                //重新对apk命名。(适用于Gradle4.0（含）以上版本)如果你Gradle版本是4.0以下版本则将上面的一行代码放开并注释下面的这一行。
                it.outputFileName = fileName

                def filepath = "E:/app/photo"
                File file = new File(filepath)

                if (!file.exists()) {
                    file.mkdirs()
                }
                it.getPackageApplication().outputDirectory = new File(filepath)

            }
        }
    }

}

def depend = config.dependencies
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(":bondexcamera")
    implementation project(":library")
    implementation project(":bondex-zxing-embedded")
    implementation project(":styleibrary")
//
//    implementation 'androidx.appcompat:appcompat:1.1.0'
//    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation 'androidx.work:work-runtime:2.3.4'
//    //    glide
//    implementation depend.glide
//    annotationProcessor depend.glide_compiler
    implementation 'com.github.bumptech.glide:glide:3.7.0'

    implementation "androidx.slidingpanelayout:slidingpanelayout:1.0.0"

    implementation project(":installlibrary")

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
